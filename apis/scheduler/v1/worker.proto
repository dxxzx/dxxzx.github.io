// Copyright 2021 magnifier Author.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

package scheduler.v1;

option go_package = "github.com/dxxzx/magnifier/apis/scheduler/v1;v1";

import "google/protobuf/empty.proto";
import "apis/scheduler/v1/device.proto";

message Worker {
    string hostname = 1;
    enum State {
        Offline = 0;
        Online = 1;
    }
    State state = 2;
    enum Health {
        Maintenance = 0;
        Active = 1;
        Retired = 2;
    }
    Health health = 3;
    string version = 4;
    string description = 5;
}

message RegisterWorkerRequest {
    string hostname = 1;
    string version = 2;
}

message ListWorkerRequest {
    int64 offset = 1;
    int32 limit = 2;
}

message ListWorkerReponse {
    int64 count = 1;
    repeated Worker results = 2;
}

message StatWorkerRequest {
    string hostname = 1;
}

message WorkerStat {
    // run ids pending to be canceled.
    repeated int64 cancel = 1;
    // run ids which is running.
    repeated int64 running = 2;
    // run ids pending to be start.
    repeated int64 start = 3;
}

message GetWorkerRequest {
    string hostname = 1;
}

message WorkerDetail {
    string hostname = 1;
    enum State {
        Offline = 0;
        Online = 1;
    }
    State state = 2;
    enum Health {
        Maintenance = 0;
        Active = 1;
        Retired = 2;
    }
    Health health = 3;
    string version = 4;
    string description = 5;
    repeated Device devices = 6;
}

service Workers {
    // register a worker, to support auto register by worker self.
    rpc Register(RegisterWorkerRequest) returns (google.protobuf.Empty);
    // create a worker, used by human operation.
    rpc Create(Worker) returns (Worker);
    rpc List(ListWorkerRequest) returns (stream ListWorkerReponse);
    rpc Stat(StatWorkerRequest) returns (WorkerStat);
    rpc Get(GetWorkerRequest) returns (Worker);
    rpc GetDetail(GetWorkerRequest) returns (WorkerDetail);
}